/*
*  Copyright (c) 2020 Wolk-1024 <wolk1024@gmail.com>
*
*  This program is free software: you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation, either version 3 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#pragma once

#include <Windows.h>
#include <TlHelp32.h>
#include <Psapi.h>

#include "NTOS/ntos.h"

#ifdef _M_IX86
#include "WoW64Utils/WoW64Utils.h"
#endif

#define STATUS_SUCCESS ((NTSTATUS)0x00000000L)

/*
typedef NTSTATUS(NTAPI* pfnLdrLoadDll) (
	_In_opt_ PCWSTR DllPath,
	_In_opt_ PULONG DllCharacteristics,
	_In_  PCUNICODE_STRING DllName,
	_Out_ PVOID* DllHandle
	);

typedef NTSTATUS(NTAPI* pfnLdrUnloadDll) (
	_In_ PVOID DllHandle
	);

typedef NTSTATUS(NTAPI* pfnLdrGetDllHandle) (
	_In_opt_ PCWSTR DllPath,
	_In_opt_ PULONG DllCharacteristics,
	_In_ PCUNICODE_STRING DllName,
	_Out_ PVOID* DllHandle
	);

typedef VOID(NTAPI* pfnRtlInitUnicodeString) (
	_Out_ PUNICODE_STRING DestinationString,
	_In_opt_ PCWSTR SourceString
	);
*/

typedef struct TDllLoader
{
	BOOLEAN UnloadDll;
	DWORD64 LdrLoadDll;
	DWORD64 LdrUnloadDll;
	DWORD64 LdrGetDllHandle;
	DWORD64 RtlInitUnicodeString;
	WCHAR DllPath[_MAX_PATH];
} TDllLoader, * PDllLoader;

// Shell32.asm
static BYTE LoaderDll32[87] =
{
	0x55, 0x89, 0xE5, 0x83, 0xEC, 0x0C, 0x53, 0x8B, 0x5D, 0x08, 0x8D, 0x53, 0x28, 0x52, 0x8D, 0x55,
	0xF8, 0x52, 0xFF, 0x53, 0x20, 0xC7, 0x45, 0xF4, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x55, 0xF4, 0x52,
	0x8D, 0x55, 0xF8, 0x52, 0x6A, 0x00, 0x6A, 0x00, 0xFF, 0x53, 0x18, 0x80, 0x3B, 0x01, 0x75, 0x0E,
	0x83, 0x7D, 0xF4, 0x00, 0x76, 0x08, 0xFF, 0x75, 0xF4, 0xFF, 0x53, 0x10, 0xEB, 0x14, 0x80, 0x3B,
	0x00, 0x75, 0x0F, 0x8D, 0x55, 0xF4, 0x52, 0x8D, 0x55, 0xF8, 0x52, 0x6A, 0x00, 0x6A, 0x00, 0xFF,
	0x53, 0x08, 0x5B, 0xC9, 0xC2, 0x04, 0x00
};

// Shell64.asm
static BYTE LoaderDll64[142] =
{
	0x55, 0x48, 0x89, 0xE5, 0x48, 0x83, 0xEC, 0x28, 0x53, 0x48, 0x89, 0xCB, 0x48, 0x83, 0xEC, 0x20,
	0x48, 0x8D, 0x4D, 0xE8, 0x48, 0x8D, 0x53, 0x28, 0xFF, 0x53, 0x20, 0x48, 0x83, 0xC4, 0x20, 0x48,
	0xC7, 0x45, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xEC, 0x20, 0x48, 0xC7, 0xC1, 0x00, 0x00,
	0x00, 0x00, 0x48, 0xC7, 0xC2, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x8D, 0x45, 0xE8, 0x4C, 0x8D, 0x4D,
	0xE0, 0xFF, 0x53, 0x18, 0x48, 0x83, 0xC4, 0x20, 0x80, 0x3B, 0x01, 0x75, 0x18, 0x48, 0x83, 0x7D,
	0xE0, 0x00, 0x76, 0x11, 0x48, 0x83, 0xEC, 0x20, 0x48, 0x8B, 0x4D, 0xE0, 0xFF, 0x53, 0x10, 0x48,
	0x83, 0xC4, 0x20, 0xEB, 0x26, 0x80, 0x3B, 0x00, 0x75, 0x21, 0x48, 0x83, 0xEC, 0x20, 0x48, 0xC7,
	0xC1, 0x00, 0x00, 0x00, 0x00, 0x48, 0xC7, 0xC2, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x8D, 0x45, 0xE8,
	0x4C, 0x8D, 0x4D, 0xE0, 0xFF, 0x53, 0x08, 0x48, 0x83, 0xC4, 0x20, 0x5B, 0xC9, 0xC3
};

DWORD GetProcessBit(_In_ HANDLE ProcessHandle);

DWORD GetProcessBit2(_In_ DWORD ProcessID);

BOOLEAN Is64BitOS();

BOOLEAN SetProcessPrivilege(_In_ HANDLE ProcessHandle, _In_ LPCWSTR PrivilegeName, _In_ BOOLEAN EnablePrivilege, _In_opt_ PBOOLEAN IsEnabled);

DWORD GetDllArch(_In_ LPCWSTR DllPath);

DWORD GetProcessIDByName(_In_ LPCWSTR ProcessName);

DWORD GetProcessIDByWindow(_In_ LPCWSTR WindowName);

HANDLE OpenProcessByName(_In_ LPCWSTR ProcessName, _In_ ACCESS_MASK DesiredAccess);

DWORD64 CrossGetRemoteModuleHandle(_In_ HANDLE ProcessHandle, _In_ LPCWSTR ModuleName, _In_opt_ BOOLEAN x64DllFrom32);

DWORD64 CrossGetRemoteProcedureAddress(_In_ HANDLE ProcessHandle, _In_ DWORD64 ModuleBase, _In_ LPCSTR ProcedureName, _In_opt_ BOOLEAN x64ProcFrom32);

BOOLEAN CrossInjectDll(_In_ DWORD ProcessID, _In_ LPCWSTR DllPath, _In_opt_ PDWORD64 DllBase, _In_opt_ BOOLEAN UnloadDll);

BOOLEAN CrossUnloadDll(_In_ DWORD ProcessID, _In_ LPCWSTR DllPath);

DWORD64 CreateProcessWithDll(_In_ LPCWSTR ProcessName, _In_opt_ LPWSTR CommandLine, _In_ LPCWSTR DllPath, _Out_opt_ PDWORD ResultPID);